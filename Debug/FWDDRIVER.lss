
FWDDRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001c58  00001cec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  00001cf4  2**0
                  ALLOC
  3 .stab         00001e54  00000000  00000000  00001cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001086  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000079b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008760  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000088c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000931b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 37       	cpi	r26, 0x70	; 112
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e5       	ldi	r30, 0x58	; 88
      78:	fc e1       	ldi	r31, 0x1C	; 28
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <main>
      8a:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTIMER0_Init>:
 * 3-Set Interrupt State
 * 4-Set Prescalar
 */

void MTIMER0_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//SetMode of Timer
#if TIMER0_MODE==TIMER_NORMAL_MODE
	CLR_BIT(TCCR0,3);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	87 7f       	andi	r24, 0xF7	; 247
     b5a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,6);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 7b       	andi	r24, 0xBF	; 191
     b68:	8c 93       	st	X, r24

	//Set Normal Mode interrupt
	#if TIMER0_NORMAL_MODE_INTERRUPT_STATE==NORMAL_MODE_INTERRUPT_DISABLED
		CLR_BIT(TIMSK,0);
	#elif TIMER0_NORMAL_MODE_INTERRUPT_STATE==NORMAL_MODE_INTERRUPT_ENABLED
		SET_BIT(TIMSK,0);
     b6a:	a9 e5       	ldi	r26, 0x59	; 89
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e9 e5       	ldi	r30, 0x59	; 89
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	81 60       	ori	r24, 0x01	; 1
     b76:	8c 93       	st	X, r24
#endif


//Set OC0 Mode
#if TIMER0_OC0_MODE==OC0_PIN_DISCONNECTED
	CLR_BIT(TCCR0,4);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7e       	andi	r24, 0xEF	; 239
     b84:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,5);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 7d       	andi	r24, 0xDF	; 223
     b92:	8c 93       	st	X, r24
#elif TIMER0_CLOCK_SOURCE==PRESCALAR_OVER_256
	CLR_BIT(TCCR0,0);
	CLR_BIT(TCCR0,1);
	SET_BIT(TCCR0,2);
#elif TIMER0_CLOCK_SOURCE==PRESCALAR_OVER_1024
	SET_BIT(TCCR0,0);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8d 7f       	andi	r24, 0xFD	; 253
     bae:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
     bb0:	a3 e5       	ldi	r26, 0x53	; 83
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e3 e5       	ldi	r30, 0x53	; 83
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	84 60       	ori	r24, 0x04	; 4
     bbc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,2);
#endif

}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <MTIMER0_SetPreload>:

void MTIMER0_SetPreload(u8 Copy_u8Preload)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	TCCR0=Copy_u8Preload;
     bd0:	e3 e5       	ldi	r30, 0x53	; 83
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 83       	st	Z, r24

}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <MTIMER0_SetCTC>:

void MTIMER0_SetCTC(u8 Copy_u8OCR)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	0f 92       	push	r0
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8OCR;
     bec:	ec e5       	ldi	r30, 0x5C	; 92
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	80 83       	st	Z, r24
}
     bf4:	0f 90       	pop	r0
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <delay_1sec>:

void delay_1sec()
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	0f 92       	push	r0
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
u8 counter;
MTIMER0_Init();
     c06:	0e 94 a3 05 	call	0xb46	; 0xb46 <MTIMER0_Init>
     c0a:	13 c0       	rjmp	.+38     	; 0xc32 <delay_1sec+0x36>
while(counter<61)
{
while((TIFR &(1<<0))==0);
     c0c:	e8 e5       	ldi	r30, 0x58	; 88
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	81 70       	andi	r24, 0x01	; 1
     c18:	90 70       	andi	r25, 0x00	; 0
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	b9 f3       	breq	.-18     	; 0xc0c <delay_1sec+0x10>
SET_BIT(TIFR,0);
     c1e:	a8 e5       	ldi	r26, 0x58	; 88
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 e5       	ldi	r30, 0x58	; 88
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	81 60       	ori	r24, 0x01	; 1
     c2a:	8c 93       	st	X, r24
counter++;
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	89 83       	std	Y+1, r24	; 0x01

void delay_1sec()
{
u8 counter;
MTIMER0_Init();
while(counter<61)
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	8d 33       	cpi	r24, 0x3D	; 61
     c36:	50 f3       	brcs	.-44     	; 0xc0c <delay_1sec+0x10>
{
while((TIFR &(1<<0))==0);
SET_BIT(TIFR,0);
counter++;
}
counter=0;
     c38:	19 82       	std	Y+1, r1	; 0x01
TCCR0=0;
     c3a:	e3 e5       	ldi	r30, 0x53	; 83
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	10 82       	st	Z, r1
}
     c40:	0f 90       	pop	r0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <timer_test>:

void timer_test(void)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_Init();
     c50:	0e 94 a3 05 	call	0xb46	; 0xb46 <MTIMER0_Init>
			MGIE_Enable();
     c54:	0e 94 73 06 	call	0xce6	; 0xce6 <MGIE_Enable>

			/*Set Direction pins*/
			MDIO_SetPinDirection(PIN0,MDIO_PORTA,PIN_OUTPUT);
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	41 e0       	ldi	r20, 0x01	; 1
     c5e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <MDIO_SetPinDirection>

}
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <TIMER0_Set0CallBack>:

void(*TIMER0_CallBack)(void); //pointer to function
void TIMER0_Set0CallBack(void(*copy_ptr)(void))
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <TIMER0_Set0CallBack+0x6>
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	9a 83       	std	Y+2, r25	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=copy_ptr;
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	90 93 6d 00 	sts	0x006D, r25
     c7e:	80 93 6c 00 	sts	0x006C, r24
}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <__vector_11>:

//call back function
void __vector_11(void)__attribute((signal));
void __vector_11(void)
{
     c8c:	1f 92       	push	r1
     c8e:	0f 92       	push	r0
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	0f 92       	push	r0
     c94:	11 24       	eor	r1, r1
     c96:	2f 93       	push	r18
     c98:	3f 93       	push	r19
     c9a:	4f 93       	push	r20
     c9c:	5f 93       	push	r21
     c9e:	6f 93       	push	r22
     ca0:	7f 93       	push	r23
     ca2:	8f 93       	push	r24
     ca4:	9f 93       	push	r25
     ca6:	af 93       	push	r26
     ca8:	bf 93       	push	r27
     caa:	ef 93       	push	r30
     cac:	ff 93       	push	r31
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
TIMER0_CallBack();
     cb6:	e0 91 6c 00 	lds	r30, 0x006C
     cba:	f0 91 6d 00 	lds	r31, 0x006D
     cbe:	09 95       	icall
}
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	ff 91       	pop	r31
     cc6:	ef 91       	pop	r30
     cc8:	bf 91       	pop	r27
     cca:	af 91       	pop	r26
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	7f 91       	pop	r23
     cd2:	6f 91       	pop	r22
     cd4:	5f 91       	pop	r21
     cd6:	4f 91       	pop	r20
     cd8:	3f 91       	pop	r19
     cda:	2f 91       	pop	r18
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	0f 90       	pop	r0
     ce2:	1f 90       	pop	r1
     ce4:	18 95       	reti

00000ce6 <MGIE_Enable>:
#include"MGIE_Private.h"
#include"MGIE.Interface.h"

/*Functions Prototypes*/
void MGIE_Enable(void)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     cee:	af e5       	ldi	r26, 0x5F	; 95
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ef e5       	ldi	r30, 0x5F	; 95
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	80 68       	ori	r24, 0x80	; 128
     cfa:	8c 93       	st	X, r24
}
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <MGIE_Disable>:

void MGIE_Disable(void)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     d0a:	af e5       	ldi	r26, 0x5F	; 95
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ef e5       	ldi	r30, 0x5F	; 95
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8f 77       	andi	r24, 0x7F	; 127
     d16:	8c 93       	st	X, r24
}
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <MEXTI0_Init>:
#include"MEXTI_Config.h"
#include"MEXTI_Interface.h"
#include"MEXTI_Private.h"

void MEXTI0_Init()
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
#elif MEXTI_SENSE_CONTROL_STATE==MEXTI_RISING_EDGE
	CLR_BIT(MCUCR,0);
	SET_BIT(MCUCR,1);

#elif MEXTI_SENSE_CONTROL_STATE==MEXTI_FALLING_EDGE
	SET_BIT(MCUCR,0);
     d26:	a5 e5       	ldi	r26, 0x55	; 85
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e5 e5       	ldi	r30, 0x55	; 85
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	81 60       	ori	r24, 0x01	; 1
     d32:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
     d34:	a5 e5       	ldi	r26, 0x55	; 85
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e5 e5       	ldi	r30, 0x55	; 85
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	82 60       	ori	r24, 0x02	; 2
     d40:	8c 93       	st	X, r24
#endif

	/*Enable Interrupt on INT0 ==> PIE of Interrupt zero*/
	SET_BIT(GICR,6);
     d42:	ab e5       	ldi	r26, 0x5B	; 91
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	eb e5       	ldi	r30, 0x5B	; 91
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	80 64       	ori	r24, 0x40	; 64
     d4e:	8c 93       	st	X, r24
}
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <Mexti_TEST_FUN>:

void Mexti_TEST_FUN(void)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
	//Set Port A Output
	MDIO_SetPortDirection(MDIO_PORTA,PORT_OUTPUT);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	6f ef       	ldi	r22, 0xFF	; 255
     d62:	0e 94 08 07 	call	0xe10	; 0xe10 <MDIO_SetPortDirection>
	MDIO_SetPinValue(PIN0,MDIO_PORTA,PIN_HIGH);
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	0e 94 8c 08 	call	0x1118	; 0x1118 <MDIO_SetPinValue>
	MDIO_SetPinDirection(PIN2,MDIO_PORTD, PIN_INPUT);
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	63 e0       	ldi	r22, 0x03	; 3
     d74:	40 e0       	ldi	r20, 0x00	; 0
     d76:	0e 94 4f 07 	call	0xe9e	; 0xe9e <MDIO_SetPinDirection>
	MDIO_SetPinValue(PIN2,MDIO_PORTD,PIN_HIGH);
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	63 e0       	ldi	r22, 0x03	; 3
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	0e 94 8c 08 	call	0x1118	; 0x1118 <MDIO_SetPinValue>

	MEXTI0_Init();
     d84:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MEXTI0_Init>
	MGIE_Enable();
     d88:	0e 94 73 06 	call	0xce6	; 0xce6 <MGIE_Enable>


}
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <INTERRUPT_Set0CallBack>:



void(*INTERRUPT_CallBack)(void); //pointer to function
void INTERRUPT_Set0CallBack(void(*copy_ptr)(void))
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <INTERRUPT_Set0CallBack+0x6>
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	89 83       	std	Y+1, r24	; 0x01
	INTERRUPT_CallBack=copy_ptr;
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	90 93 6f 00 	sts	0x006F, r25
     da8:	80 93 6e 00 	sts	0x006E, r24
}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <__vector_1>:


//call back function
void __vector_1(void)__attribute((signal));
void __vector_1(void)
{
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	2f 93       	push	r18
     dc2:	3f 93       	push	r19
     dc4:	4f 93       	push	r20
     dc6:	5f 93       	push	r21
     dc8:	6f 93       	push	r22
     dca:	7f 93       	push	r23
     dcc:	8f 93       	push	r24
     dce:	9f 93       	push	r25
     dd0:	af 93       	push	r26
     dd2:	bf 93       	push	r27
     dd4:	ef 93       	push	r30
     dd6:	ff 93       	push	r31
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
	INTERRUPT_CallBack();
     de0:	e0 91 6e 00 	lds	r30, 0x006E
     de4:	f0 91 6f 00 	lds	r31, 0x006F
     de8:	09 95       	icall
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	ff 91       	pop	r31
     df0:	ef 91       	pop	r30
     df2:	bf 91       	pop	r27
     df4:	af 91       	pop	r26
     df6:	9f 91       	pop	r25
     df8:	8f 91       	pop	r24
     dfa:	7f 91       	pop	r23
     dfc:	6f 91       	pop	r22
     dfe:	5f 91       	pop	r21
     e00:	4f 91       	pop	r20
     e02:	3f 91       	pop	r19
     e04:	2f 91       	pop	r18
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <MDIO_SetPortDirection>:
#include"../../LIB/BIT_MATH.h"
#include"MDIO_Interface.h"
#include"MDIO_Private.h"
#include <util/delay.h>
void MDIO_SetPortDirection(u8 Copy_u8PortNumber, u8 Copy_u8PortDirection)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <MDIO_SetPortDirection+0x6>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <MDIO_SetPortDirection+0x8>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	8f 3f       	cpi	r24, 0xFF	; 255
     e24:	19 f0       	breq	.+6      	; 0xe2c <MDIO_SetPortDirection+0x1c>
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	88 23       	and	r24, r24
     e2a:	91 f5       	brne	.+100    	; 0xe90 <MDIO_SetPortDirection+0x80>
	{
		/*Valid Port Direction given */
		switch(Copy_u8PortNumber)
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	3c 83       	std	Y+4, r19	; 0x04
     e34:	2b 83       	std	Y+3, r18	; 0x03
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	9c 81       	ldd	r25, Y+4	; 0x04
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	91 05       	cpc	r25, r1
     e3e:	d1 f0       	breq	.+52     	; 0xe74 <MDIO_SetPortDirection+0x64>
     e40:	2b 81       	ldd	r18, Y+3	; 0x03
     e42:	3c 81       	ldd	r19, Y+4	; 0x04
     e44:	22 30       	cpi	r18, 0x02	; 2
     e46:	31 05       	cpc	r19, r1
     e48:	2c f4       	brge	.+10     	; 0xe54 <MDIO_SetPortDirection+0x44>
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	61 f0       	breq	.+24     	; 0xe6a <MDIO_SetPortDirection+0x5a>
     e52:	1e c0       	rjmp	.+60     	; 0xe90 <MDIO_SetPortDirection+0x80>
     e54:	2b 81       	ldd	r18, Y+3	; 0x03
     e56:	3c 81       	ldd	r19, Y+4	; 0x04
     e58:	22 30       	cpi	r18, 0x02	; 2
     e5a:	31 05       	cpc	r19, r1
     e5c:	81 f0       	breq	.+32     	; 0xe7e <MDIO_SetPortDirection+0x6e>
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	83 30       	cpi	r24, 0x03	; 3
     e64:	91 05       	cpc	r25, r1
     e66:	81 f0       	breq	.+32     	; 0xe88 <MDIO_SetPortDirection+0x78>
     e68:	13 c0       	rjmp	.+38     	; 0xe90 <MDIO_SetPortDirection+0x80>
		{
		case MDIO_PORTA:
			DDRA=Copy_u8PortDirection;
     e6a:	ea e3       	ldi	r30, 0x3A	; 58
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	80 83       	st	Z, r24
     e72:	0e c0       	rjmp	.+28     	; 0xe90 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTB:
			DDRB=Copy_u8PortDirection;
     e74:	e7 e3       	ldi	r30, 0x37	; 55
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	80 83       	st	Z, r24
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTC:
			DDRC=Copy_u8PortDirection;
     e7e:	e4 e3       	ldi	r30, 0x34	; 52
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	80 83       	st	Z, r24
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTD:
			DDRD=Copy_u8PortDirection;
     e88:	e1 e3       	ldi	r30, 0x31	; 49
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	80 83       	st	Z, r24
	}
	else
	{
		/*Invalid Port Direction given */
	}
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <MDIO_SetPinDirection>:



void MDIO_SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber, u8 Copy_u8PinDirection)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <MDIO_SetPinDirection+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <MDIO_SetPinDirection+0x8>
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	6a 83       	std	Y+2, r22	; 0x02
     eb0:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	88 30       	cpi	r24, 0x08	; 8
     eb6:	08 f0       	brcs	.+2      	; 0xeba <MDIO_SetPinDirection+0x1c>
     eb8:	e0 c0       	rjmp	.+448    	; 0x107a <MDIO_SetPinDirection+0x1dc>
	{
		switch(Copy_u8PortNumber)
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	3d 83       	std	Y+5, r19	; 0x05
     ec2:	2c 83       	std	Y+4, r18	; 0x04
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	9d 81       	ldd	r25, Y+5	; 0x05
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	91 05       	cpc	r25, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <MDIO_SetPinDirection+0x32>
     ece:	47 c0       	rjmp	.+142    	; 0xf5e <MDIO_SetPinDirection+0xc0>
     ed0:	2c 81       	ldd	r18, Y+4	; 0x04
     ed2:	3d 81       	ldd	r19, Y+5	; 0x05
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	2c f4       	brge	.+10     	; 0xee4 <MDIO_SetPinDirection+0x46>
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	71 f0       	breq	.+28     	; 0xefe <MDIO_SetPinDirection+0x60>
     ee2:	cb c0       	rjmp	.+406    	; 0x107a <MDIO_SetPinDirection+0x1dc>
     ee4:	2c 81       	ldd	r18, Y+4	; 0x04
     ee6:	3d 81       	ldd	r19, Y+5	; 0x05
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <MDIO_SetPinDirection+0x52>
     eee:	67 c0       	rjmp	.+206    	; 0xfbe <MDIO_SetPinDirection+0x120>
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	9d 81       	ldd	r25, Y+5	; 0x05
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	91 05       	cpc	r25, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <MDIO_SetPinDirection+0x5e>
     efa:	91 c0       	rjmp	.+290    	; 0x101e <MDIO_SetPinDirection+0x180>
     efc:	be c0       	rjmp	.+380    	; 0x107a <MDIO_SetPinDirection+0x1dc>
		{
		case MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	a1 f4       	brne	.+40     	; 0xf2c <MDIO_SetPinDirection+0x8e>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
     f04:	aa e3       	ldi	r26, 0x3A	; 58
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ea e3       	ldi	r30, 0x3A	; 58
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <MDIO_SetPinDirection+0x84>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <MDIO_SetPinDirection+0x80>
     f26:	84 2b       	or	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	a7 c0       	rjmp	.+334    	; 0x107a <MDIO_SetPinDirection+0x1dc>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	88 23       	and	r24, r24
     f30:	09 f0       	breq	.+2      	; 0xf34 <MDIO_SetPinDirection+0x96>
     f32:	a3 c0       	rjmp	.+326    	; 0x107a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
     f34:	aa e3       	ldi	r26, 0x3A	; 58
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ea e3       	ldi	r30, 0x3A	; 58
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <MDIO_SetPinDirection+0xb4>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <MDIO_SetPinDirection+0xb0>
     f56:	80 95       	com	r24
     f58:	84 23       	and	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	8e c0       	rjmp	.+284    	; 0x107a <MDIO_SetPinDirection+0x1dc>
			{
				//Invalid Pin Direction
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	a1 f4       	brne	.+40     	; 0xf8c <MDIO_SetPinDirection+0xee>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
     f64:	a7 e3       	ldi	r26, 0x37	; 55
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e7 e3       	ldi	r30, 0x37	; 55
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <MDIO_SetPinDirection+0xe4>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <MDIO_SetPinDirection+0xe0>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	77 c0       	rjmp	.+238    	; 0x107a <MDIO_SetPinDirection+0x1dc>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 23       	and	r24, r24
     f90:	09 f0       	breq	.+2      	; 0xf94 <MDIO_SetPinDirection+0xf6>
     f92:	73 c0       	rjmp	.+230    	; 0x107a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
     f94:	a7 e3       	ldi	r26, 0x37	; 55
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e7 e3       	ldi	r30, 0x37	; 55
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <MDIO_SetPinDirection+0x114>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <MDIO_SetPinDirection+0x110>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	5e c0       	rjmp	.+188    	; 0x107a <MDIO_SetPinDirection+0x1dc>
			{
				//Invalid Pin Direction
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	a1 f4       	brne	.+40     	; 0xfec <MDIO_SetPinDirection+0x14e>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
     fc4:	a4 e3       	ldi	r26, 0x34	; 52
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e4 e3       	ldi	r30, 0x34	; 52
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <MDIO_SetPinDirection+0x144>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <MDIO_SetPinDirection+0x140>
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	47 c0       	rjmp	.+142    	; 0x107a <MDIO_SetPinDirection+0x1dc>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 23       	and	r24, r24
     ff0:	09 f0       	breq	.+2      	; 0xff4 <MDIO_SetPinDirection+0x156>
     ff2:	43 c0       	rjmp	.+134    	; 0x107a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
     ff4:	a4 e3       	ldi	r26, 0x34	; 52
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e4 e3       	ldi	r30, 0x34	; 52
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <MDIO_SetPinDirection+0x174>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <MDIO_SetPinDirection+0x170>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	2e c0       	rjmp	.+92     	; 0x107a <MDIO_SetPinDirection+0x1dc>
			{
				//Invalid Pin Direction
			}
			break;
		case MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	a1 f4       	brne	.+40     	; 0x104c <MDIO_SetPinDirection+0x1ae>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    1024:	a1 e3       	ldi	r26, 0x31	; 49
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e1 e3       	ldi	r30, 0x31	; 49
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <MDIO_SetPinDirection+0x1a4>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <MDIO_SetPinDirection+0x1a0>
    1046:	84 2b       	or	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	17 c0       	rjmp	.+46     	; 0x107a <MDIO_SetPinDirection+0x1dc>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	88 23       	and	r24, r24
    1050:	a1 f4       	brne	.+40     	; 0x107a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    1052:	a1 e3       	ldi	r26, 0x31	; 49
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e1 e3       	ldi	r30, 0x31	; 49
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <MDIO_SetPinDirection+0x1d2>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <MDIO_SetPinDirection+0x1ce>
    1074:	80 95       	com	r24
    1076:	84 23       	and	r24, r20
    1078:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong Pin Number*/
	}
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <MDIO_SetPortValue>:


void MDIO_SetPortValue(u8 Copy_u8PortNumber, u8 Copy_u8PortValue)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <MDIO_SetPortValue+0x6>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <MDIO_SetPortValue+0x8>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PortValue==PORT_HIGH)||(Copy_u8PortValue==PORT_LOW))
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	8f 3f       	cpi	r24, 0xFF	; 255
    109e:	19 f0       	breq	.+6      	; 0x10a6 <MDIO_SetPortValue+0x1c>
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	88 23       	and	r24, r24
    10a4:	91 f5       	brne	.+100    	; 0x110a <MDIO_SetPortValue+0x80>
	{
		/*Valid Port Direction given */
		switch(Copy_u8PortNumber)
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	3c 83       	std	Y+4, r19	; 0x04
    10ae:	2b 83       	std	Y+3, r18	; 0x03
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	91 05       	cpc	r25, r1
    10b8:	d1 f0       	breq	.+52     	; 0x10ee <MDIO_SetPortValue+0x64>
    10ba:	2b 81       	ldd	r18, Y+3	; 0x03
    10bc:	3c 81       	ldd	r19, Y+4	; 0x04
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	2c f4       	brge	.+10     	; 0x10ce <MDIO_SetPortValue+0x44>
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <MDIO_SetPortValue+0x5a>
    10cc:	1e c0       	rjmp	.+60     	; 0x110a <MDIO_SetPortValue+0x80>
    10ce:	2b 81       	ldd	r18, Y+3	; 0x03
    10d0:	3c 81       	ldd	r19, Y+4	; 0x04
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	81 f0       	breq	.+32     	; 0x10f8 <MDIO_SetPortValue+0x6e>
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	81 f0       	breq	.+32     	; 0x1102 <MDIO_SetPortValue+0x78>
    10e2:	13 c0       	rjmp	.+38     	; 0x110a <MDIO_SetPortValue+0x80>
		{
		case MDIO_PORTA:
			PORTA=Copy_u8PortValue;
    10e4:	eb e3       	ldi	r30, 0x3B	; 59
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	80 83       	st	Z, r24
    10ec:	0e c0       	rjmp	.+28     	; 0x110a <MDIO_SetPortValue+0x80>
			break;
		case MDIO_PORTB:
			PORTB=Copy_u8PortValue;
    10ee:	e8 e3       	ldi	r30, 0x38	; 56
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	80 83       	st	Z, r24
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <MDIO_SetPortValue+0x80>
			break;
		case MDIO_PORTC:
			PORTC=Copy_u8PortValue;
    10f8:	e5 e3       	ldi	r30, 0x35	; 53
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	80 83       	st	Z, r24
    1100:	04 c0       	rjmp	.+8      	; 0x110a <MDIO_SetPortValue+0x80>
			break;
		case MDIO_PORTD:
			PORTD=Copy_u8PortValue;
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	80 83       	st	Z, r24
	}
	else
	{
		/*Invalid Port Value given */
	}
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <MDIO_SetPinValue>:

void MDIO_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber, u8 Copy_u8PinValue)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <MDIO_SetPinValue+0x6>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <MDIO_SetPinValue+0x8>
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	6a 83       	std	Y+2, r22	; 0x02
    112a:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	88 30       	cpi	r24, 0x08	; 8
    1130:	08 f0       	brcs	.+2      	; 0x1134 <MDIO_SetPinValue+0x1c>
    1132:	e0 c0       	rjmp	.+448    	; 0x12f4 <MDIO_SetPinValue+0x1dc>
	{
		switch(Copy_u8PortNumber)
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3d 83       	std	Y+5, r19	; 0x05
    113c:	2c 83       	std	Y+4, r18	; 0x04
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	09 f4       	brne	.+2      	; 0x114a <MDIO_SetPinValue+0x32>
    1148:	47 c0       	rjmp	.+142    	; 0x11d8 <MDIO_SetPinValue+0xc0>
    114a:	2c 81       	ldd	r18, Y+4	; 0x04
    114c:	3d 81       	ldd	r19, Y+5	; 0x05
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	2c f4       	brge	.+10     	; 0x115e <MDIO_SetPinValue+0x46>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	71 f0       	breq	.+28     	; 0x1178 <MDIO_SetPinValue+0x60>
    115c:	cb c0       	rjmp	.+406    	; 0x12f4 <MDIO_SetPinValue+0x1dc>
    115e:	2c 81       	ldd	r18, Y+4	; 0x04
    1160:	3d 81       	ldd	r19, Y+5	; 0x05
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	09 f4       	brne	.+2      	; 0x116a <MDIO_SetPinValue+0x52>
    1168:	67 c0       	rjmp	.+206    	; 0x1238 <MDIO_SetPinValue+0x120>
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	9d 81       	ldd	r25, Y+5	; 0x05
    116e:	83 30       	cpi	r24, 0x03	; 3
    1170:	91 05       	cpc	r25, r1
    1172:	09 f4       	brne	.+2      	; 0x1176 <MDIO_SetPinValue+0x5e>
    1174:	91 c0       	rjmp	.+290    	; 0x1298 <MDIO_SetPinValue+0x180>
    1176:	be c0       	rjmp	.+380    	; 0x12f4 <MDIO_SetPinValue+0x1dc>
		{
		case MDIO_PORTA:
			if(Copy_u8PinValue==PIN_HIGH)
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	a1 f4       	brne	.+40     	; 0x11a6 <MDIO_SetPinValue+0x8e>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
    117e:	ab e3       	ldi	r26, 0x3B	; 59
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	eb e3       	ldi	r30, 0x3B	; 59
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <MDIO_SetPinValue+0x84>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <MDIO_SetPinValue+0x80>
    11a0:	84 2b       	or	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	a7 c0       	rjmp	.+334    	; 0x12f4 <MDIO_SetPinValue+0x1dc>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 23       	and	r24, r24
    11aa:	09 f0       	breq	.+2      	; 0x11ae <MDIO_SetPinValue+0x96>
    11ac:	a3 c0       	rjmp	.+326    	; 0x12f4 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
    11ae:	ab e3       	ldi	r26, 0x3B	; 59
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	eb e3       	ldi	r30, 0x3B	; 59
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <MDIO_SetPinValue+0xb4>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <MDIO_SetPinValue+0xb0>
    11d0:	80 95       	com	r24
    11d2:	84 23       	and	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	8e c0       	rjmp	.+284    	; 0x12f4 <MDIO_SetPinValue+0x1dc>
			{
				//Invalid Pin Value
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinValue==PIN_HIGH)
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	a1 f4       	brne	.+40     	; 0x1206 <MDIO_SetPinValue+0xee>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
    11de:	a8 e3       	ldi	r26, 0x38	; 56
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e8 e3       	ldi	r30, 0x38	; 56
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <MDIO_SetPinValue+0xe4>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <MDIO_SetPinValue+0xe0>
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	77 c0       	rjmp	.+238    	; 0x12f4 <MDIO_SetPinValue+0x1dc>
			}
			else if(Copy_u8PinValue==PIN_INPUT)
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	88 23       	and	r24, r24
    120a:	09 f0       	breq	.+2      	; 0x120e <MDIO_SetPinValue+0xf6>
    120c:	73 c0       	rjmp	.+230    	; 0x12f4 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
    120e:	a8 e3       	ldi	r26, 0x38	; 56
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e8 e3       	ldi	r30, 0x38	; 56
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <MDIO_SetPinValue+0x114>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <MDIO_SetPinValue+0x110>
    1230:	80 95       	com	r24
    1232:	84 23       	and	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	5e c0       	rjmp	.+188    	; 0x12f4 <MDIO_SetPinValue+0x1dc>
			{
				//Invalid Pin Value
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinValue==PIN_OUTPUT)
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	a1 f4       	brne	.+40     	; 0x1266 <MDIO_SetPinValue+0x14e>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
    123e:	a5 e3       	ldi	r26, 0x35	; 53
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e5 e3       	ldi	r30, 0x35	; 53
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <MDIO_SetPinValue+0x144>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <MDIO_SetPinValue+0x140>
    1260:	84 2b       	or	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	47 c0       	rjmp	.+142    	; 0x12f4 <MDIO_SetPinValue+0x1dc>
			}
			else if(Copy_u8PinValue==PIN_INPUT)
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	88 23       	and	r24, r24
    126a:	09 f0       	breq	.+2      	; 0x126e <MDIO_SetPinValue+0x156>
    126c:	43 c0       	rjmp	.+134    	; 0x12f4 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
    126e:	a5 e3       	ldi	r26, 0x35	; 53
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e5 e3       	ldi	r30, 0x35	; 53
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <MDIO_SetPinValue+0x174>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <MDIO_SetPinValue+0x170>
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	2e c0       	rjmp	.+92     	; 0x12f4 <MDIO_SetPinValue+0x1dc>
			{
				//Invalid Pin Value
			}
			break;
		case MDIO_PORTD:
			if(Copy_u8PinValue==PIN_OUTPUT)
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	a1 f4       	brne	.+40     	; 0x12c6 <MDIO_SetPinValue+0x1ae>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
    129e:	a2 e3       	ldi	r26, 0x32	; 50
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e2 e3       	ldi	r30, 0x32	; 50
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <MDIO_SetPinValue+0x1a4>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <MDIO_SetPinValue+0x1a0>
    12c0:	84 2b       	or	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	17 c0       	rjmp	.+46     	; 0x12f4 <MDIO_SetPinValue+0x1dc>
			}
			else if(Copy_u8PinValue==PIN_INPUT)
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	88 23       	and	r24, r24
    12ca:	a1 f4       	brne	.+40     	; 0x12f4 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
    12cc:	a2 e3       	ldi	r26, 0x32	; 50
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e2 e3       	ldi	r30, 0x32	; 50
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <MDIO_SetPinValue+0x1d2>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <MDIO_SetPinValue+0x1ce>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong Pin Number*/
	}
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <MDIO_ReadPort>:

void MDIO_ReadPort(u8 Copy_u8PortNumber, u8 * P_u8PortReading)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	00 d0       	rcall	.+0      	; 0x130a <MDIO_ReadPort+0x6>
    130a:	00 d0       	rcall	.+0      	; 0x130c <MDIO_ReadPort+0x8>
    130c:	0f 92       	push	r0
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	7b 83       	std	Y+3, r23	; 0x03
    1316:	6a 83       	std	Y+2, r22	; 0x02
	if(P_u8PortReading!=NULL)
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	9b 81       	ldd	r25, Y+3	; 0x03
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	d1 f1       	breq	.+116    	; 0x1394 <MDIO_ReadPort+0x90>
	{
		switch(Copy_u8PortNumber)
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	3d 83       	std	Y+5, r19	; 0x05
    1328:	2c 83       	std	Y+4, r18	; 0x04
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	91 05       	cpc	r25, r1
    1332:	e1 f0       	breq	.+56     	; 0x136c <MDIO_ReadPort+0x68>
    1334:	2c 81       	ldd	r18, Y+4	; 0x04
    1336:	3d 81       	ldd	r19, Y+5	; 0x05
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	2c f4       	brge	.+10     	; 0x1348 <MDIO_ReadPort+0x44>
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	9d 81       	ldd	r25, Y+5	; 0x05
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	61 f0       	breq	.+24     	; 0x135e <MDIO_ReadPort+0x5a>
    1346:	26 c0       	rjmp	.+76     	; 0x1394 <MDIO_ReadPort+0x90>
    1348:	2c 81       	ldd	r18, Y+4	; 0x04
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	a1 f0       	breq	.+40     	; 0x137a <MDIO_ReadPort+0x76>
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	91 05       	cpc	r25, r1
    135a:	b1 f0       	breq	.+44     	; 0x1388 <MDIO_ReadPort+0x84>
    135c:	1b c0       	rjmp	.+54     	; 0x1394 <MDIO_ReadPort+0x90>
		{
		case MDIO_PORTA:
			*P_u8PortReading=PINA;
    135e:	e9 e3       	ldi	r30, 0x39	; 57
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	ea 81       	ldd	r30, Y+2	; 0x02
    1366:	fb 81       	ldd	r31, Y+3	; 0x03
    1368:	80 83       	st	Z, r24
    136a:	14 c0       	rjmp	.+40     	; 0x1394 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTB:
			*P_u8PortReading=PINB;
    136c:	e6 e3       	ldi	r30, 0x36	; 54
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	ea 81       	ldd	r30, Y+2	; 0x02
    1374:	fb 81       	ldd	r31, Y+3	; 0x03
    1376:	80 83       	st	Z, r24
    1378:	0d c0       	rjmp	.+26     	; 0x1394 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTC:
			*P_u8PortReading=PINC;
    137a:	e3 e3       	ldi	r30, 0x33	; 51
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	ea 81       	ldd	r30, Y+2	; 0x02
    1382:	fb 81       	ldd	r31, Y+3	; 0x03
    1384:	80 83       	st	Z, r24
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTD:
			*P_u8PortReading=PIND;
    1388:	e0 e3       	ldi	r30, 0x30	; 48
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	ea 81       	ldd	r30, Y+2	; 0x02
    1390:	fb 81       	ldd	r31, Y+3	; 0x03
    1392:	80 83       	st	Z, r24
	}
	else
	{
		//Null Pointer
	}
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <MDIO_ReadPin>:


void MDIO_ReadPin(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber, u8 * P_u8PortReading)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <MDIO_ReadPin+0x6>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <MDIO_ReadPin+0x8>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <MDIO_ReadPin+0xa>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	6a 83       	std	Y+2, r22	; 0x02
    13b6:	5c 83       	std	Y+4, r21	; 0x04
    13b8:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	88 30       	cpi	r24, 0x08	; 8
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <MDIO_ReadPin+0x1e>
    13c0:	70 c0       	rjmp	.+224    	; 0x14a2 <MDIO_ReadPin+0xfe>
	{
		switch(Copy_u8PortNumber)
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3e 83       	std	Y+6, r19	; 0x06
    13ca:	2d 83       	std	Y+5, r18	; 0x05
    13cc:	4d 81       	ldd	r20, Y+5	; 0x05
    13ce:	5e 81       	ldd	r21, Y+6	; 0x06
    13d0:	41 30       	cpi	r20, 0x01	; 1
    13d2:	51 05       	cpc	r21, r1
    13d4:	59 f1       	breq	.+86     	; 0x142c <MDIO_ReadPin+0x88>
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	82 30       	cpi	r24, 0x02	; 2
    13dc:	91 05       	cpc	r25, r1
    13de:	34 f4       	brge	.+12     	; 0x13ec <MDIO_ReadPin+0x48>
    13e0:	2d 81       	ldd	r18, Y+5	; 0x05
    13e2:	3e 81       	ldd	r19, Y+6	; 0x06
    13e4:	21 15       	cp	r18, r1
    13e6:	31 05       	cpc	r19, r1
    13e8:	69 f0       	breq	.+26     	; 0x1404 <MDIO_ReadPin+0x60>
    13ea:	5b c0       	rjmp	.+182    	; 0x14a2 <MDIO_ReadPin+0xfe>
    13ec:	4d 81       	ldd	r20, Y+5	; 0x05
    13ee:	5e 81       	ldd	r21, Y+6	; 0x06
    13f0:	42 30       	cpi	r20, 0x02	; 2
    13f2:	51 05       	cpc	r21, r1
    13f4:	79 f1       	breq	.+94     	; 0x1454 <MDIO_ReadPin+0xb0>
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	91 05       	cpc	r25, r1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <MDIO_ReadPin+0x5e>
    1400:	3d c0       	rjmp	.+122    	; 0x147c <MDIO_ReadPin+0xd8>
    1402:	4f c0       	rjmp	.+158    	; 0x14a2 <MDIO_ReadPin+0xfe>
		{
		case MDIO_PORTA:
			*P_u8PortReading=GET_BIT(PINA,Copy_u8PinNumber);
    1404:	e9 e3       	ldi	r30, 0x39	; 57
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a9 01       	movw	r20, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <MDIO_ReadPin+0x78>
    1418:	55 95       	asr	r21
    141a:	47 95       	ror	r20
    141c:	8a 95       	dec	r24
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <MDIO_ReadPin+0x74>
    1420:	ca 01       	movw	r24, r20
    1422:	81 70       	andi	r24, 0x01	; 1
    1424:	eb 81       	ldd	r30, Y+3	; 0x03
    1426:	fc 81       	ldd	r31, Y+4	; 0x04
    1428:	80 83       	st	Z, r24
    142a:	3b c0       	rjmp	.+118    	; 0x14a2 <MDIO_ReadPin+0xfe>
			break;
		case MDIO_PORTB:
			*P_u8PortReading=GET_BIT(PINB,Copy_u8PinNumber);
    142c:	e6 e3       	ldi	r30, 0x36	; 54
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a9 01       	movw	r20, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <MDIO_ReadPin+0xa0>
    1440:	55 95       	asr	r21
    1442:	47 95       	ror	r20
    1444:	8a 95       	dec	r24
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <MDIO_ReadPin+0x9c>
    1448:	ca 01       	movw	r24, r20
    144a:	81 70       	andi	r24, 0x01	; 1
    144c:	eb 81       	ldd	r30, Y+3	; 0x03
    144e:	fc 81       	ldd	r31, Y+4	; 0x04
    1450:	80 83       	st	Z, r24
    1452:	27 c0       	rjmp	.+78     	; 0x14a2 <MDIO_ReadPin+0xfe>
			break;
		case MDIO_PORTC:
			*P_u8PortReading=GET_BIT(PINC,Copy_u8PinNumber);
    1454:	e3 e3       	ldi	r30, 0x33	; 51
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a9 01       	movw	r20, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <MDIO_ReadPin+0xc8>
    1468:	55 95       	asr	r21
    146a:	47 95       	ror	r20
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <MDIO_ReadPin+0xc4>
    1470:	ca 01       	movw	r24, r20
    1472:	81 70       	andi	r24, 0x01	; 1
    1474:	eb 81       	ldd	r30, Y+3	; 0x03
    1476:	fc 81       	ldd	r31, Y+4	; 0x04
    1478:	80 83       	st	Z, r24
    147a:	13 c0       	rjmp	.+38     	; 0x14a2 <MDIO_ReadPin+0xfe>
			break;
		case MDIO_PORTD:
			*P_u8PortReading=GET_BIT(PIND,Copy_u8PinNumber);
    147c:	e0 e3       	ldi	r30, 0x30	; 48
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a9 01       	movw	r20, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <MDIO_ReadPin+0xf0>
    1490:	55 95       	asr	r21
    1492:	47 95       	ror	r20
    1494:	8a 95       	dec	r24
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <MDIO_ReadPin+0xec>
    1498:	ca 01       	movw	r24, r20
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	eb 81       	ldd	r30, Y+3	; 0x03
    149e:	fc 81       	ldd	r31, Y+4	; 0x04
    14a0:	80 83       	st	Z, r24
	}
	else
	{
		/*Wrong Pin Number*/
	}
}
    14a2:	26 96       	adiw	r28, 0x06	; 6
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <MDIO_TogglePin>:

void MDIO_TogglePin(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <MDIO_TogglePin+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <MDIO_TogglePin+0x8>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	88 30       	cpi	r24, 0x08	; 8
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <MDIO_TogglePin+0x18>
    14ca:	6e c0       	rjmp	.+220    	; 0x15a8 <MDIO_TogglePin+0xf4>
	{
		switch(Copy_u8PortNumber)
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3c 83       	std	Y+4, r19	; 0x04
    14d4:	2b 83       	std	Y+3, r18	; 0x03
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	49 f1       	breq	.+82     	; 0x1532 <MDIO_TogglePin+0x7e>
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <MDIO_TogglePin+0x40>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	61 f0       	breq	.+24     	; 0x150a <MDIO_TogglePin+0x56>
    14f2:	5a c0       	rjmp	.+180    	; 0x15a8 <MDIO_TogglePin+0xf4>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	71 f1       	breq	.+92     	; 0x155a <MDIO_TogglePin+0xa6>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	e9 f1       	breq	.+122    	; 0x1582 <MDIO_TogglePin+0xce>
    1508:	4f c0       	rjmp	.+158    	; 0x15a8 <MDIO_TogglePin+0xf4>
		{
		case MDIO_PORTA:
			TOGGLE_BIT(PORTA,Copy_u8PinNumber);
    150a:	ab e3       	ldi	r26, 0x3B	; 59
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	eb e3       	ldi	r30, 0x3B	; 59
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 2e       	mov	r0, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <MDIO_TogglePin+0x74>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <MDIO_TogglePin+0x70>
    152c:	84 27       	eor	r24, r20
    152e:	8c 93       	st	X, r24
    1530:	3b c0       	rjmp	.+118    	; 0x15a8 <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTB:
			TOGGLE_BIT(PORTB,Copy_u8PinNumber);
    1532:	a8 e3       	ldi	r26, 0x38	; 56
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e8 e3       	ldi	r30, 0x38	; 56
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <MDIO_TogglePin+0x9c>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <MDIO_TogglePin+0x98>
    1554:	84 27       	eor	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	27 c0       	rjmp	.+78     	; 0x15a8 <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTC:
			TOGGLE_BIT(PORTC,Copy_u8PinNumber);
    155a:	a5 e3       	ldi	r26, 0x35	; 53
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e5 e3       	ldi	r30, 0x35	; 53
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <MDIO_TogglePin+0xc4>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <MDIO_TogglePin+0xc0>
    157c:	84 27       	eor	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	13 c0       	rjmp	.+38     	; 0x15a8 <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTD:
			TOGGLE_BIT(PORTD,Copy_u8PinNumber);
    1582:	a2 e3       	ldi	r26, 0x32	; 50
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e2 e3       	ldi	r30, 0x32	; 50
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <MDIO_TogglePin+0xec>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <MDIO_TogglePin+0xe8>
    15a4:	84 27       	eor	r24, r20
    15a6:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong Pin Number*/
	}
}
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <MDIO_SetNibbleValue>:


void MDIO_SetNibbleValue(u8 Copy_u8PinStart, u8 Copy_u8PortNumber, u8 Copy_u8Value)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <MDIO_SetNibbleValue+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <MDIO_SetNibbleValue+0x8>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <MDIO_SetNibbleValue+0xa>
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	8a 83       	std	Y+2, r24	; 0x02
    15c6:	6b 83       	std	Y+3, r22	; 0x03
    15c8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Value=Copy_u8Value;
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	89 83       	std	Y+1, r24	; 0x01

	//Handling of the Value
	Loc_u8Value=((Loc_u8Value&(0x0F))<<Copy_u8PinStart);
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9c 01       	movw	r18, r24
    15d6:	2f 70       	andi	r18, 0x0F	; 15
    15d8:	30 70       	andi	r19, 0x00	; 0
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a9 01       	movw	r20, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <MDIO_SetNibbleValue+0x32>
    15e4:	44 0f       	add	r20, r20
    15e6:	55 1f       	adc	r21, r21
    15e8:	8a 95       	dec	r24
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <MDIO_SetNibbleValue+0x2e>
    15ec:	ca 01       	movw	r24, r20
    15ee:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PinStart<=4)&&(Copy_u8PinStart>=0))
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	85 30       	cpi	r24, 0x05	; 5
    15f4:	08 f0       	brcs	.+2      	; 0x15f8 <MDIO_SetNibbleValue+0x42>
    15f6:	95 c0       	rjmp	.+298    	; 0x1722 <MDIO_SetNibbleValue+0x16c>
	{
		switch(Copy_u8PortNumber)
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	3e 83       	std	Y+6, r19	; 0x06
    1600:	2d 83       	std	Y+5, r18	; 0x05
    1602:	4d 81       	ldd	r20, Y+5	; 0x05
    1604:	5e 81       	ldd	r21, Y+6	; 0x06
    1606:	41 30       	cpi	r20, 0x01	; 1
    1608:	51 05       	cpc	r21, r1
    160a:	a9 f1       	breq	.+106    	; 0x1676 <MDIO_SetNibbleValue+0xc0>
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	82 30       	cpi	r24, 0x02	; 2
    1612:	91 05       	cpc	r25, r1
    1614:	34 f4       	brge	.+12     	; 0x1622 <MDIO_SetNibbleValue+0x6c>
    1616:	2d 81       	ldd	r18, Y+5	; 0x05
    1618:	3e 81       	ldd	r19, Y+6	; 0x06
    161a:	21 15       	cp	r18, r1
    161c:	31 05       	cpc	r19, r1
    161e:	71 f0       	breq	.+28     	; 0x163c <MDIO_SetNibbleValue+0x86>
    1620:	80 c0       	rjmp	.+256    	; 0x1722 <MDIO_SetNibbleValue+0x16c>
    1622:	4d 81       	ldd	r20, Y+5	; 0x05
    1624:	5e 81       	ldd	r21, Y+6	; 0x06
    1626:	42 30       	cpi	r20, 0x02	; 2
    1628:	51 05       	cpc	r21, r1
    162a:	09 f4       	brne	.+2      	; 0x162e <MDIO_SetNibbleValue+0x78>
    162c:	41 c0       	rjmp	.+130    	; 0x16b0 <MDIO_SetNibbleValue+0xfa>
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	91 05       	cpc	r25, r1
    1636:	09 f4       	brne	.+2      	; 0x163a <MDIO_SetNibbleValue+0x84>
    1638:	58 c0       	rjmp	.+176    	; 0x16ea <MDIO_SetNibbleValue+0x134>
    163a:	73 c0       	rjmp	.+230    	; 0x1722 <MDIO_SetNibbleValue+0x16c>
		{
		case MDIO_PORTA:
			//Mask Port A
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    163c:	ab e3       	ldi	r26, 0x3B	; 59
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	eb e3       	ldi	r30, 0x3B	; 59
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	8f e0       	ldi	r24, 0x0F	; 15
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <MDIO_SetNibbleValue+0xa4>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <MDIO_SetNibbleValue+0xa0>
    165e:	80 95       	com	r24
    1660:	84 23       	and	r24, r20
    1662:	8c 93       	st	X, r24
			PORTA|=Loc_u8Value;
    1664:	ab e3       	ldi	r26, 0x3B	; 59
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	eb e3       	ldi	r30, 0x3B	; 59
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	90 81       	ld	r25, Z
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	89 2b       	or	r24, r25
    1672:	8c 93       	st	X, r24
    1674:	56 c0       	rjmp	.+172    	; 0x1722 <MDIO_SetNibbleValue+0x16c>

			break;
		case MDIO_PORTB:
			PORTB&=(~((0x0F)<<Copy_u8PinStart));
    1676:	a8 e3       	ldi	r26, 0x38	; 56
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e8 e3       	ldi	r30, 0x38	; 56
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	8f e0       	ldi	r24, 0x0F	; 15
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <MDIO_SetNibbleValue+0xde>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <MDIO_SetNibbleValue+0xda>
    1698:	80 95       	com	r24
    169a:	84 23       	and	r24, r20
    169c:	8c 93       	st	X, r24
			PORTB|=Loc_u8Value;
    169e:	a8 e3       	ldi	r26, 0x38	; 56
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e8 e3       	ldi	r30, 0x38	; 56
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	90 81       	ld	r25, Z
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	89 2b       	or	r24, r25
    16ac:	8c 93       	st	X, r24
    16ae:	39 c0       	rjmp	.+114    	; 0x1722 <MDIO_SetNibbleValue+0x16c>

			break;
		case MDIO_PORTC:
			PORTC&=(~((0x0F)<<Copy_u8PinStart));
    16b0:	a5 e3       	ldi	r26, 0x35	; 53
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e5 e3       	ldi	r30, 0x35	; 53
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	8f e0       	ldi	r24, 0x0F	; 15
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <MDIO_SetNibbleValue+0x118>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <MDIO_SetNibbleValue+0x114>
    16d2:	80 95       	com	r24
    16d4:	84 23       	and	r24, r20
    16d6:	8c 93       	st	X, r24
			PORTC|=Loc_u8Value;
    16d8:	a5 e3       	ldi	r26, 0x35	; 53
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e5 e3       	ldi	r30, 0x35	; 53
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	90 81       	ld	r25, Z
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	89 2b       	or	r24, r25
    16e6:	8c 93       	st	X, r24
    16e8:	1c c0       	rjmp	.+56     	; 0x1722 <MDIO_SetNibbleValue+0x16c>

			break;
		case MDIO_PORTD:
			PORTD&=(~((0x0F)<<Copy_u8PinStart));
    16ea:	a2 e3       	ldi	r26, 0x32	; 50
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e2 e3       	ldi	r30, 0x32	; 50
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	8f e0       	ldi	r24, 0x0F	; 15
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <MDIO_SetNibbleValue+0x152>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <MDIO_SetNibbleValue+0x14e>
    170c:	80 95       	com	r24
    170e:	84 23       	and	r24, r20
    1710:	8c 93       	st	X, r24
			PORTD|=Loc_u8Value;
    1712:	a2 e3       	ldi	r26, 0x32	; 50
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e2 e3       	ldi	r30, 0x32	; 50
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	90 81       	ld	r25, Z
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	89 2b       	or	r24, r25
    1720:	8c 93       	st	X, r24
	else
	{
		//Do Nothing

	}
}
    1722:	26 96       	adiw	r28, 0x06	; 6
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <MDIO_TEST_FUN>:


void MDIO_TEST_FUN(void)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	2e 97       	sbiw	r28, 0x0e	; 14
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
	MDIO_SetPortDirection(MDIO_PORTD, PORT_OUTPUT);
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	6f ef       	ldi	r22, 0xFF	; 255
    174c:	0e 94 08 07 	call	0xe10	; 0xe10 <MDIO_SetPortDirection>
	MDIO_SetPortValue(MDIO_PORTD, PORT_HIGH);
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	6f ef       	ldi	r22, 0xFF	; 255
    1754:	0e 94 45 08 	call	0x108a	; 0x108a <MDIO_SetPortValue>
	MDIO_TogglePin(PIN0,MDIO_PORTC);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	62 e0       	ldi	r22, 0x02	; 2
    175c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <MDIO_TogglePin>
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	aa e7       	ldi	r26, 0x7A	; 122
    1766:	b5 e4       	ldi	r27, 0x45	; 69
    1768:	8b 87       	std	Y+11, r24	; 0x0b
    176a:	9c 87       	std	Y+12, r25	; 0x0c
    176c:	ad 87       	std	Y+13, r26	; 0x0d
    176e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1770:	6b 85       	ldd	r22, Y+11	; 0x0b
    1772:	7c 85       	ldd	r23, Y+12	; 0x0c
    1774:	8d 85       	ldd	r24, Y+13	; 0x0d
    1776:	9e 85       	ldd	r25, Y+14	; 0x0e
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a e7       	ldi	r20, 0x7A	; 122
    177e:	53 e4       	ldi	r21, 0x43	; 67
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8f 83       	std	Y+7, r24	; 0x07
    178a:	98 87       	std	Y+8, r25	; 0x08
    178c:	a9 87       	std	Y+9, r26	; 0x09
    178e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1790:	6f 81       	ldd	r22, Y+7	; 0x07
    1792:	78 85       	ldd	r23, Y+8	; 0x08
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	9a 85       	ldd	r25, Y+10	; 0x0a
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a4:	88 23       	and	r24, r24
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <MDIO_TEST_FUN+0x7e>
		__ticks = 1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9e 83       	std	Y+6, r25	; 0x06
    17ae:	8d 83       	std	Y+5, r24	; 0x05
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <MDIO_TEST_FUN+0xfc>
	else if (__tmp > 65535)
    17b2:	6f 81       	ldd	r22, Y+7	; 0x07
    17b4:	78 85       	ldd	r23, Y+8	; 0x08
    17b6:	89 85       	ldd	r24, Y+9	; 0x09
    17b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	4c f5       	brge	.+82     	; 0x181c <MDIO_TEST_FUN+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    17cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9e 83       	std	Y+6, r25	; 0x06
    17f0:	8d 83       	std	Y+5, r24	; 0x05
    17f2:	0f c0       	rjmp	.+30     	; 0x1812 <MDIO_TEST_FUN+0xde>
    17f4:	89 e1       	ldi	r24, 0x19	; 25
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <MDIO_TEST_FUN+0xcc>
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	69 f7       	brne	.-38     	; 0x17f4 <MDIO_TEST_FUN+0xc0>
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <MDIO_TEST_FUN+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181c:	6f 81       	ldd	r22, Y+7	; 0x07
    181e:	78 85       	ldd	r23, Y+8	; 0x08
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <MDIO_TEST_FUN+0x108>
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4000);
	MDIO_TogglePin(PIN0,MDIO_PORTC);
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	62 e0       	ldi	r22, 0x02	; 2
    1848:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <MDIO_TogglePin>
	MDIO_SetPortDirection(MDIO_PORTA, PORT_INPUT);
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	0e 94 08 07 	call	0xe10	; 0xe10 <MDIO_SetPortDirection>

}
    1854:	2e 96       	adiw	r28, 0x0e	; 14
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <LED_INIT>:
#include<util/delay.h>



void LED_INIT(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	00 d0       	rcall	.+0      	; 0x186c <LED_INIT+0x6>
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_SetPinDirection(Copy_u8PinNumber,Copy_u8PortNumber, PIN_OUTPUT);
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	69 81       	ldd	r22, Y+1	; 0x01
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <MDIO_SetPinDirection>
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <LED_ON>:


void LED_ON(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber)
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <LED_ON+0x6>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_SetPinValue(Copy_u8PinNumber,Copy_u8PortNumber, PIN_HIGH);
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	69 81       	ldd	r22, Y+1	; 0x01
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	0e 94 8c 08 	call	0x1118	; 0x1118 <MDIO_SetPinValue>
}
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <LED_OFF>:

void LED_OFF(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber)
{
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <LED_OFF+0x6>
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_SetPinValue(Copy_u8PinNumber,Copy_u8PortNumber, PIN_LOW);
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	69 81       	ldd	r22, Y+1	; 0x01
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	0e 94 8c 08 	call	0x1118	; 0x1118 <MDIO_SetPinValue>
}
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <LED_NormalDelay>:

void LED_NormalDelay(void)
{
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
	MTIMER0_Init();
    18d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <MTIMER0_Init>
	MGIE_Enable();
    18d8:	0e 94 73 06 	call	0xce6	; 0xce6 <MGIE_Enable>

}
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <YELLOW_LEDBlink>:

void YELLOW_LEDBlink(void)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62

	MDIO_TogglePin(PIN2,MDIO_PORTA);
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <MDIO_TogglePin>
	MDIO_TogglePin(PIN2,MDIO_PORTB);
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	61 e0       	ldi	r22, 0x01	; 1
    18f6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <MDIO_TogglePin>
	delay_1sec();
    18fa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <delay_1sec>

}
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <Yellow_cars_led>:

void Yellow_cars_led(void)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
	MDIO_TogglePin(PIN2,MDIO_PORTA);
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <MDIO_TogglePin>
	delay_1sec();
    1914:	0e 94 fe 05 	call	0xbfc	; 0xbfc <delay_1sec>
}
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <Button_init>:
#include"../../MCAL/MGIE/MGIE.Interface.h"
#include"../../MCAL/MEXTI/MEXTI_Interface.h"
#include"../../LIB/STD_TYPES.h"
#include"BUTTON.h"
EN_Button_state Button_init(void)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62

		MDIO_SetPinDirection(PIN2,MDIO_PORTD, PIN_INPUT);
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	63 e0       	ldi	r22, 0x03	; 3
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <MDIO_SetPinDirection>
		MDIO_SetPinValue(PIN2,MDIO_PORTD,PIN_HIGH);
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	63 e0       	ldi	r22, 0x03	; 3
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 8c 08 	call	0x1118	; 0x1118 <MDIO_SetPinValue>
		if(1)
		{
			return ok;
    193a:	82 e0       	ldi	r24, 0x02	; 2
		}else return error;

}
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <Button_State>:

EN_Button_state Button_State(void)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <Button_State+0x6>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
	u8 PIN_READING=0;
    194c:	19 82       	std	Y+1, r1	; 0x01
	MDIO_ReadPin(PIN2,MDIO_PORTD,&PIN_READING);
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	63 e0       	ldi	r22, 0x03	; 3
    1952:	9e 01       	movw	r18, r28
    1954:	2f 5f       	subi	r18, 0xFF	; 255
    1956:	3f 4f       	sbci	r19, 0xFF	; 255
    1958:	a9 01       	movw	r20, r18
    195a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <MDIO_ReadPin>
	if(PIN_READING==1)
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	11 f4       	brne	.+4      	; 0x1968 <Button_State+0x26>
	{
		return Button_Pressed;
    1964:	1a 82       	std	Y+2, r1	; 0x02
    1966:	02 c0       	rjmp	.+4      	; 0x196c <Button_State+0x2a>
	}else{
		return Not_pressed;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	8a 83       	std	Y+2, r24	; 0x02
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <Button_Interrupt>:

void Button_Interrupt(void)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62

	MEXTI0_Init();
    1980:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MEXTI0_Init>
	MGIE_Enable();
    1984:	0e 94 73 06 	call	0xce6	; 0xce6 <MGIE_Enable>
}
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <FUNC0>:

u8 static state=0;
u16 static counter=0;
u8 static flag;
void FUNC0 (void)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62

	++counter;
    1996:	80 91 69 00 	lds	r24, 0x0069
    199a:	90 91 6a 00 	lds	r25, 0x006A
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	90 93 6a 00 	sts	0x006A, r25
    19a4:	80 93 69 00 	sts	0x0069, r24
	if((counter==10)&&(state==0))
    19a8:	80 91 69 00 	lds	r24, 0x0069
    19ac:	90 91 6a 00 	lds	r25, 0x006A
    19b0:	8a 30       	cpi	r24, 0x0A	; 10
    19b2:	91 05       	cpc	r25, r1
    19b4:	41 f5       	brne	.+80     	; 0x1a06 <FUNC0+0x78>
    19b6:	80 91 68 00 	lds	r24, 0x0068
    19ba:	88 23       	and	r24, r24
    19bc:	21 f5       	brne	.+72     	; 0x1a06 <FUNC0+0x78>
	{
		LED_ON(MDIO_PORTA,PIN0);
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	0e 94 44 0c 	call	0x1888	; 0x1888 <LED_ON>
		LED_OFF(MDIO_PORTA,PIN1);
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>
		LED_OFF(MDIO_PORTA,PIN2);
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	62 e0       	ldi	r22, 0x02	; 2
    19d2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>

		LED_OFF(MDIO_PORTB,PIN0);
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>
		LED_ON(MDIO_PORTB,PIN1);
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	0e 94 44 0c 	call	0x1888	; 0x1888 <LED_ON>
		LED_OFF(MDIO_PORTB,PIN2);
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	62 e0       	ldi	r22, 0x02	; 2
    19ea:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>
		counter=0;
    19ee:	10 92 6a 00 	sts	0x006A, r1
    19f2:	10 92 69 00 	sts	0x0069, r1
		flag=0;
    19f6:	10 92 6b 00 	sts	0x006B, r1
		state++;
    19fa:	80 91 68 00 	lds	r24, 0x0068
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	80 93 68 00 	sts	0x0068, r24
    1a04:	92 c0       	rjmp	.+292    	; 0x1b2a <FUNC0+0x19c>
	}
	else if((counter==300)&&(state==1))
    1a06:	80 91 69 00 	lds	r24, 0x0069
    1a0a:	90 91 6a 00 	lds	r25, 0x006A
    1a0e:	21 e0       	ldi	r18, 0x01	; 1
    1a10:	8c 32       	cpi	r24, 0x2C	; 44
    1a12:	92 07       	cpc	r25, r18
    1a14:	59 f5       	brne	.+86     	; 0x1a6c <FUNC0+0xde>
    1a16:	80 91 68 00 	lds	r24, 0x0068
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	39 f5       	brne	.+78     	; 0x1a6c <FUNC0+0xde>
	{
		LED_OFF(MDIO_PORTA,PIN0);
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>
		LED_OFF(MDIO_PORTA,PIN1);
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>

		LED_OFF(MDIO_PORTB,PIN0);
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>
		LED_ON(MDIO_PORTB,PIN1);
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	0e 94 44 0c 	call	0x1888	; 0x1888 <LED_ON>
	    Yellow_cars_led();
    1a3e:	0e 94 82 0c 	call	0x1904	; 0x1904 <Yellow_cars_led>
	    Yellow_cars_led();
    1a42:	0e 94 82 0c 	call	0x1904	; 0x1904 <Yellow_cars_led>
	    Yellow_cars_led();
    1a46:	0e 94 82 0c 	call	0x1904	; 0x1904 <Yellow_cars_led>
	    Yellow_cars_led();
    1a4a:	0e 94 82 0c 	call	0x1904	; 0x1904 <Yellow_cars_led>
	    Yellow_cars_led();
    1a4e:	0e 94 82 0c 	call	0x1904	; 0x1904 <Yellow_cars_led>
		counter=0;
    1a52:	10 92 6a 00 	sts	0x006A, r1
    1a56:	10 92 69 00 	sts	0x0069, r1
		flag=1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	80 93 6b 00 	sts	0x006B, r24
		state++;
    1a60:	80 91 68 00 	lds	r24, 0x0068
    1a64:	8f 5f       	subi	r24, 0xFF	; 255
    1a66:	80 93 68 00 	sts	0x0068, r24
    1a6a:	5f c0       	rjmp	.+190    	; 0x1b2a <FUNC0+0x19c>
	}
	else if((counter==10)&&(state==2))
    1a6c:	80 91 69 00 	lds	r24, 0x0069
    1a70:	90 91 6a 00 	lds	r25, 0x006A
    1a74:	8a 30       	cpi	r24, 0x0A	; 10
    1a76:	91 05       	cpc	r25, r1
    1a78:	49 f5       	brne	.+82     	; 0x1acc <FUNC0+0x13e>
    1a7a:	80 91 68 00 	lds	r24, 0x0068
    1a7e:	82 30       	cpi	r24, 0x02	; 2
    1a80:	29 f5       	brne	.+74     	; 0x1acc <FUNC0+0x13e>
	{
		counter=0;
    1a82:	10 92 6a 00 	sts	0x006A, r1
    1a86:	10 92 69 00 	sts	0x0069, r1

		LED_OFF(MDIO_PORTA,PIN0);
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>
		LED_ON(MDIO_PORTA,PIN1);
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	0e 94 44 0c 	call	0x1888	; 0x1888 <LED_ON>
		LED_OFF(MDIO_PORTA,PIN2);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	62 e0       	ldi	r22, 0x02	; 2
    1a9e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>

		LED_ON(MDIO_PORTB,PIN0);
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	0e 94 44 0c 	call	0x1888	; 0x1888 <LED_ON>
		LED_OFF(MDIO_PORTB,PIN1);
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>
		LED_OFF(MDIO_PORTB,PIN2);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	62 e0       	ldi	r22, 0x02	; 2
    1ab6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>
		flag=2;
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	80 93 6b 00 	sts	0x006B, r24
		state++;
    1ac0:	80 91 68 00 	lds	r24, 0x0068
    1ac4:	8f 5f       	subi	r24, 0xFF	; 255
    1ac6:	80 93 68 00 	sts	0x0068, r24
    1aca:	2f c0       	rjmp	.+94     	; 0x1b2a <FUNC0+0x19c>
	}
	else if((counter==300)&&(state==3))
    1acc:	80 91 69 00 	lds	r24, 0x0069
    1ad0:	90 91 6a 00 	lds	r25, 0x006A
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	8c 32       	cpi	r24, 0x2C	; 44
    1ad8:	92 07       	cpc	r25, r18
    1ada:	39 f5       	brne	.+78     	; 0x1b2a <FUNC0+0x19c>
    1adc:	80 91 68 00 	lds	r24, 0x0068
    1ae0:	83 30       	cpi	r24, 0x03	; 3
    1ae2:	19 f5       	brne	.+70     	; 0x1b2a <FUNC0+0x19c>
	{
		LED_OFF(MDIO_PORTA,PIN0);
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>
		LED_OFF(MDIO_PORTA,PIN1);
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	61 e0       	ldi	r22, 0x01	; 1
    1af0:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>

		LED_OFF(MDIO_PORTB,PIN0);
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>
		LED_OFF(MDIO_PORTB,PIN1);
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	0e 94 55 0c 	call	0x18aa	; 0x18aa <LED_OFF>
		YELLOW_LEDBlink();
    1b04:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <YELLOW_LEDBlink>
		YELLOW_LEDBlink();
    1b08:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <YELLOW_LEDBlink>
		YELLOW_LEDBlink();
    1b0c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <YELLOW_LEDBlink>
		YELLOW_LEDBlink();
    1b10:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <YELLOW_LEDBlink>
		YELLOW_LEDBlink();
    1b14:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <YELLOW_LEDBlink>
		counter=0;
    1b18:	10 92 6a 00 	sts	0x006A, r1
    1b1c:	10 92 69 00 	sts	0x0069, r1
		flag=3;
    1b20:	83 e0       	ldi	r24, 0x03	; 3
    1b22:	80 93 6b 00 	sts	0x006B, r24
		state=0;
    1b26:	10 92 68 00 	sts	0x0068, r1
	}

}
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <Pedestrian_Mode>:

void Pedestrian_Mode(void)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
	if((flag==0)||(flag==1)||(flag==3))
    1b38:	80 91 6b 00 	lds	r24, 0x006B
    1b3c:	88 23       	and	r24, r24
    1b3e:	41 f0       	breq	.+16     	; 0x1b50 <Pedestrian_Mode+0x20>
    1b40:	80 91 6b 00 	lds	r24, 0x006B
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	21 f0       	breq	.+8      	; 0x1b50 <Pedestrian_Mode+0x20>
    1b48:	80 91 6b 00 	lds	r24, 0x006B
    1b4c:	83 30       	cpi	r24, 0x03	; 3
    1b4e:	b1 f4       	brne	.+44     	; 0x1b7c <Pedestrian_Mode+0x4c>
	{
	counter=299;
    1b50:	8b e2       	ldi	r24, 0x2B	; 43
    1b52:	91 e0       	ldi	r25, 0x01	; 1
    1b54:	90 93 6a 00 	sts	0x006A, r25
    1b58:	80 93 69 00 	sts	0x0069, r24
		state=3;
    1b5c:	83 e0       	ldi	r24, 0x03	; 3
    1b5e:	80 93 68 00 	sts	0x0068, r24
		FUNC0();
    1b62:	0e 94 c7 0c 	call	0x198e	; 0x198e <FUNC0>
		counter=9;
    1b66:	89 e0       	ldi	r24, 0x09	; 9
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	90 93 6a 00 	sts	0x006A, r25
    1b6e:	80 93 69 00 	sts	0x0069, r24
		state=2;
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	80 93 68 00 	sts	0x0068, r24
		FUNC0();
    1b78:	0e 94 c7 0c 	call	0x198e	; 0x198e <FUNC0>
	}

}
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <APP_Start>:


void APP_Start(void)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		Button_init();
    1b8a:	0e 94 8f 0c 	call	0x191e	; 0x191e <Button_init>

		LED_NormalDelay();
    1b8e:	0e 94 66 0c 	call	0x18cc	; 0x18cc <LED_NormalDelay>
		Button_Interrupt();
    1b92:	0e 94 bc 0c 	call	0x1978	; 0x1978 <Button_Interrupt>

		LED_INIT(MDIO_PORTA ,PIN0);
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	0e 94 33 0c 	call	0x1866	; 0x1866 <LED_INIT>
		LED_INIT(MDIO_PORTA ,PIN1);
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	61 e0       	ldi	r22, 0x01	; 1
    1ba2:	0e 94 33 0c 	call	0x1866	; 0x1866 <LED_INIT>
		LED_INIT(MDIO_PORTA ,PIN2);
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	62 e0       	ldi	r22, 0x02	; 2
    1baa:	0e 94 33 0c 	call	0x1866	; 0x1866 <LED_INIT>
		LED_INIT(MDIO_PORTB ,PIN0);
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	0e 94 33 0c 	call	0x1866	; 0x1866 <LED_INIT>
		LED_INIT(MDIO_PORTB ,PIN1);
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	0e 94 33 0c 	call	0x1866	; 0x1866 <LED_INIT>
		LED_INIT(MDIO_PORTB ,PIN2);
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	62 e0       	ldi	r22, 0x02	; 2
    1bc2:	0e 94 33 0c 	call	0x1866	; 0x1866 <LED_INIT>


		TIMER0_Set0CallBack(FUNC0);
    1bc6:	87 ec       	ldi	r24, 0xC7	; 199
    1bc8:	9c e0       	ldi	r25, 0x0C	; 12
    1bca:	0e 94 34 06 	call	0xc68	; 0xc68 <TIMER0_Set0CallBack>
		INTERRUPT_Set0CallBack(Pedestrian_Mode);
    1bce:	88 e9       	ldi	r24, 0x98	; 152
    1bd0:	9d e0       	ldi	r25, 0x0D	; 13
    1bd2:	0e 94 c9 06 	call	0xd92	; 0xd92 <INTERRUPT_Set0CallBack>
    1bd6:	d9 cf       	rjmp	.-78     	; 0x1b8a <APP_Start+0x8>

00001bd8 <main>:

}
*/

int main()
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62


	APP_Start();
    1be0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <APP_Start>
    1be4:	ff cf       	rjmp	.-2      	; 0x1be4 <main+0xc>

00001be6 <__prologue_saves__>:
    1be6:	2f 92       	push	r2
    1be8:	3f 92       	push	r3
    1bea:	4f 92       	push	r4
    1bec:	5f 92       	push	r5
    1bee:	6f 92       	push	r6
    1bf0:	7f 92       	push	r7
    1bf2:	8f 92       	push	r8
    1bf4:	9f 92       	push	r9
    1bf6:	af 92       	push	r10
    1bf8:	bf 92       	push	r11
    1bfa:	cf 92       	push	r12
    1bfc:	df 92       	push	r13
    1bfe:	ef 92       	push	r14
    1c00:	ff 92       	push	r15
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	ca 1b       	sub	r28, r26
    1c10:	db 0b       	sbc	r29, r27
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	09 94       	ijmp

00001c1e <__epilogue_restores__>:
    1c1e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c20:	39 88       	ldd	r3, Y+17	; 0x11
    1c22:	48 88       	ldd	r4, Y+16	; 0x10
    1c24:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c26:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c28:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c30:	b9 84       	ldd	r11, Y+9	; 0x09
    1c32:	c8 84       	ldd	r12, Y+8	; 0x08
    1c34:	df 80       	ldd	r13, Y+7	; 0x07
    1c36:	ee 80       	ldd	r14, Y+6	; 0x06
    1c38:	fd 80       	ldd	r15, Y+5	; 0x05
    1c3a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c3c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c3e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c40:	b9 81       	ldd	r27, Y+1	; 0x01
    1c42:	ce 0f       	add	r28, r30
    1c44:	d1 1d       	adc	r29, r1
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	ed 01       	movw	r28, r26
    1c52:	08 95       	ret

00001c54 <_exit>:
    1c54:	f8 94       	cli

00001c56 <__stop_program>:
    1c56:	ff cf       	rjmp	.-2      	; 0x1c56 <__stop_program>
